<div id="smoke-bkg" class="fixed top-0 h-full w-full -z-50"></div>

<script>
  import * as THREE from "three";

  // Sistema de singleton para mantener una única instancia persistente
  class SmokeEffect {
    private static instance: SmokeEffect | null = null;
    private scene: THREE.Scene | null = null;
    private camera: THREE.PerspectiveCamera | null = null;
    private renderer: THREE.WebGLRenderer | null = null;
    private animationId: number | null = null;
    private light: THREE.DirectionalLight | null = null;
    private smokeParticles: THREE.Mesh[] = [];
    private container: HTMLElement | null = null;
    private isInitialized = false;

    private constructor() {}

    static getInstance(): SmokeEffect {
      if (!SmokeEffect.instance) {
        SmokeEffect.instance = new SmokeEffect();
      }
      return SmokeEffect.instance;
    }

    init(container: HTMLElement): void {
      if (this.isInitialized) {
        // Si ya está inicializado, solo actualizamos el contenedor si es necesario
        if (this.container !== container && this.renderer) {
          this.container = container;
          container.appendChild(this.renderer.domElement);
        }
        return;
      }

      this.container = container;
      const w = window.innerWidth;
      const h = window.innerHeight;

      const themePreference = (window as any).getThemePreference() as "dark" | "light";
      const currentTheme = THEMES[themePreference];

      // Inicializar Three.js
      this.scene = new THREE.Scene();

      this.camera = new THREE.PerspectiveCamera(75, w / h, 0.1, 1000);
      this.camera.position.z = 10;
      this.scene.add(this.camera);

      this.renderer = new THREE.WebGLRenderer({
        powerPreference: "high-performance",
        antialias: false,
        alpha: true
      });
      this.renderer.setSize(w, h);
      this.renderer.setClearColor(currentTheme.background, 0);
      container.appendChild(this.renderer.domElement);

      this.light = new THREE.DirectionalLight(currentTheme.light, 0.5);
      this.light.position.set(-1, 3, 1);
      this.scene.add(this.light);

      // Cargar textura y crear partículas
      const loader = new THREE.TextureLoader();
      loader.crossOrigin = "";
      loader.load("/img/effects/smokegamonal.webp", (texture: THREE.Texture) => {
        if (!this.scene) return;
        
        const smokeGeo = new THREE.PlaneGeometry(300, 300);
        const smokeMaterial = new THREE.MeshLambertMaterial({
          map: texture,
          transparent: true,
          opacity: currentTheme.opacity,
        });

        const NUM_OF_PARTICLES = 150;
        for (let p = 0; p < NUM_OF_PARTICLES; p++) {
          const particle = new THREE.Mesh(smokeGeo, smokeMaterial);
          particle.position.set(
            Math.random() * 500 - 250,
            Math.random() * 500 - 250,
            Math.random() * 1000 - 100
          );
          particle.rotation.z = Math.random() * 360;
          this.scene.add(particle);
          this.smokeParticles.push(particle);
        }
      });

      // Configurar eventos
      window.addEventListener("resize", this.resize.bind(this));
      window.addEventListener("theme-changed", this.updateTheme.bind(this));

      this.isInitialized = true;
      this.animate();
    }

    resize(): void {
      if (!this.camera || !this.renderer) return;
      
      const w = window.innerWidth;
      const h = window.innerHeight;
      this.camera.aspect = w / h;
      this.camera.updateProjectionMatrix();
      this.renderer.setSize(w, h);
    }

    updateTheme(): void {
      if (!this.light || !this.renderer) return;
      
      const themePreference = (window as any).getThemePreference() as "dark" | "light";
      const currentTheme = THEMES[themePreference];

      this.light.color.set(currentTheme.light);
      this.renderer.setClearColor(currentTheme.background, 1);

      this.smokeParticles.forEach((p) => {
        if (p.material instanceof THREE.MeshLambertMaterial) {
          p.material.opacity = currentTheme.opacity;
        }
      });
    }

    animate(): void {
      this.animationId = requestAnimationFrame(this.animate.bind(this));

      this.smokeParticles.forEach((p) => {
        p.rotation.z += 0.001;
      });

      if (this.scene && this.camera && this.renderer) {
        this.renderer.render(this.scene, this.camera);
      }
    }
  }

  const THEMES = {
    dark: {
      background: 0x111111,
      light: 0xffffff,
      opacity: 1,
    },
    light: {
      background: 0xeeeeee,
      light: 0xffffff,
      opacity: 0.2,
    },
  };

  // Inicializar el efecto cuando el DOM esté listo
  function setupSmokeEffect() {
    const container = document.getElementById("smoke-bkg");
    if (!container) return;
    
    // Limpiar cualquier elemento hijo existente
    while (container.firstChild) {
      container.removeChild(container.firstChild);
    }
    
    // Inicializar o reutilizar el singleton
    SmokeEffect.getInstance().init(container);
  }

  // Inicializar al cargar
  /* if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupSmokeEffect);
  } else {
    setupSmokeEffect();
  } */
  
  // Manejar los cambios de página de Astro
  document.addEventListener('astro:page-load', setupSmokeEffect);
</script>