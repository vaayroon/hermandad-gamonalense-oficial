---
interface Props {
  images: {
    src: string;
    alt: string;
    title?: string;
    description?: string;
  }[];
}

const { images } = Astro.props;
---

<div
  class:list={[
    "container relative w-full h-auto px-4 pt-4 pb-32 bg-transparent overflow-hidden",
    "md:px-10 md:py-10",
  ]}
>
  <div
    class:list={[
      "slide relative w-full h-full md:w-[90%] aspect-[16/9]",
      "[&>*.item:nth-child(-n+2)]:top-0 [&>*.item:nth-child(-n+2)]:left-0 [&>*.item:nth-child(-n+2)]:translate-x-0 [&>*.item:nth-child(-n+2)]:translate-y-0 [&>*.item:nth-child(-n+2)]:w-full [&>*.item:nth-child(-n+2)]:h-full [&>*.item:nth-child(-n+2)]:rounded-[10px] sm:[&>*.item:nth-child(-n+2)]:rounded-[15px]",
      "[&>*.item:nth-child(2)>.content]:block",
      "[&>*.item:nth-child(3)]:top-[85%] [&>*.item:nth-child(3)]:left-[40%] [&>*.item:nth-child(2)]:animate-expandZoomIn",
      "md:[&>*.item:nth-child(3)]:top-[20%] md:[&>*.item:nth-child(3)]:left-[90%]",
      "[&>*.item:nth-child(n+4)]:top-[85%] [&>*.item:nth-child(3)]:left-[40%]",
      "md:[&>*.item:nth-child(n+4)]:top-[20%] md:[&>*.item:nth-child(3)]:left-[90%]",
      "[&>*.item:nth-child(n+4)]:hidden [&>*.item:nth-child(n+4)]:overflow-hidden [&>*.item:nth-child(3)]:animate-zoom-in",
    ]}
  >
    {
      images.map((image, index) => (
        <div
          class:list={[
            "transition",
            "item w-[80px] h-[120px] absolute p-0 top-1/2 -translate-y-1/2 list-none rounded-[10px] shadow-[0_3px_15px_#505050] bg-center bg-cover bg-no-repeat inline-block",
            "sm:w-[106px] md:w-[146px] lg:w-[200px] sm:h-[160px] md:h-[220px] lg:h-[300px]",
            "sm:rounded-[15px] md:rounded-[20px]",
            "sm:shadow-[0_4px_20px_#505050] md:shadow-[0_5px_30px_#505050]",
          ]}
          style={`background-image: url('${image.src}');`}
          data-index={index}
        >
          <div class="content absolute top-1/2 left-[60px] sm:left-[80px] md:left-[100px] w-[200px] sm:w-[250px] md:w-[300px] text-left -translate-y-1/2 text-white hidden">
            <h2 class="text-2xl sm:text-3xl md:text-4xl font-bold mb-1 sm:mb-2">
              {image.title}
            </h2>
            {image.description && (
              <p class="text-xs sm:text-sm max-w-[180px] sm:max-w-[220px] md:max-w-md">
                {image.description}
              </p>
            )}
          </div>
        </div>
      ))
    }
  </div>

  <div
    class="hidden button absolute w-full text-center bottom-[10px] left-[-5%] md:block md:bottom-[20px]"
  >
    <button
      class="prev w-[30px] sm:w-[35px] md:w-[40px] h-[25px] sm:h-[30px] md:h-[35px] rounded-[4px] sm:rounded-[6px] md:rounded-[8px] border border-primary-800 bg-white text-primary-800 cursor-pointer m-[0_3px] sm:m-[0_4px] md:m-[0_5px] transition-colors duration-300 hover:bg-primary-800 hover:text-white"
      aria-label="Previous image"
    >
      {"<"}
    </button>
    <button
      class="next w-[30px] sm:w-[35px] md:w-[40px] h-[25px] sm:h-[30px] md:h-[35px] rounded-[4px] sm:rounded-[6px] md:rounded-[8px] border border-primary-800 bg-white text-primary-800 cursor-pointer m-[0_3px] sm:m-[0_4px] md:m-[0_5px] transition-colors duration-300 hover:bg-primary-800 hover:text-white"
      aria-label="Next image"
    >
      {">"}
    </button>
  </div>

  <!-- Mobile Slider controls -->
  <button
    type="button"
    class="absolute prev-mobile md:hidden top-[-10%] start-[2%] z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none"
  >
    <span
      class="inline-flex items-center justify-center w-10 h-10 rounded-full bg-white/30 dark:bg-gray-800/30 group-hover:bg-primary-200/50 dark:group-hover:bg-primary-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none"
    >
      <svg
        class="w-4 h-4 text-white dark:text-gray-800 rtl:rotate-180"
        aria-hidden="true"
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 6 10"
      >
        <path
          stroke="currentColor"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M5 1 1 5l4 4"></path>
      </svg>
      <span class="sr-only">Previous</span>
    </span>
  </button>
  <button
    type="button"
    class="absolute next-mobile md:hidden top-[-10%] end-[2%] z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none"
  >
    <span
      class="inline-flex items-center justify-center w-10 h-10 rounded-full bg-white/30 dark:bg-gray-800/30 group-hover:bg-white/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none"
    >
      <svg
        class="w-4 h-4 text-white dark:text-gray-800 rtl:rotate-180"
        aria-hidden="true"
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 6 10"
      >
        <path
          stroke="currentColor"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="m1 9 4-4-4-4"></path>
      </svg>
      <span class="sr-only">Next</span>
    </span>
  </button>
</div>

<script>
  import { $, $$ } from "@/lib/dom-selector";

  document.addEventListener("astro:page-load", () => {
    const next = $(".next");
    const prev = $(".prev");

    function updateSlide(movement: string = "next") {
      const items = $$(".item");
      const slide = $(".slide");

      if (slide && items.length > 0) {
        switch (movement) {
          case "next":
            slide.appendChild(items[0]);
            break;
          case "prev":
            slide.prepend(items[items.length - 1]);
            break;
          default:
            break;
        }
      }
    }

    if (next) {
      next.addEventListener("click", () => updateSlide());
    }

    if (prev) {
      prev.addEventListener("click", () => updateSlide("prev"));
    }

    const nextMobile = $(".next-mobile");
    const prevMobile = $(".prev-mobile");

    if (nextMobile) {
      nextMobile.addEventListener("click", () => updateSlide());
    }

    if (prevMobile) {
      prevMobile.addEventListener("click", () => updateSlide("prev"));
    }
  });
</script>
