---
// src/components/CyclicGallery.astro
interface Props {
  images: {
    src: string;
    alt: string;
    title?: string;
    description?: string;
  }[];
}

const { images } = Astro.props;

// Asegurarse de que hay suficientes imágenes para la galería
const normalizedImages =
  images.length >= 5 ? images : [...images, ...images, ...images].slice(0, 5);
---

<div
  class="relative w-[1000px] h-[600px] mx-auto my-8 rounded-[15px] bg-[#f5f5f5] shadow-[0_30px_50px_#dbdbdb] overflow-hidden"
>
  <div class="slide relative w-full h-full">
    {
      normalizedImages.map((image, index) => (
        <div
          class="item absolute w-[200px] h-[300px] p-0 top-1/2 -translate-y-1/2 list-none rounded-[20px] shadow-[0_30px_50px_#505050] bg-cover bg-center bg-no-repeat inline-block transition-all duration-500 ease-in-out"
          style={`background-image: url('${image.src}');`}
          data-index={index}
        >
          <div class="content absolute top-1/2 left-[100px] w-[300px] text-left -translate-y-1/2 font-sans hidden">
            <div class="name text-4xl uppercase font-bold opacity-0">
              {image.title}
            </div>
            <div class="description mt-[10px] mb-[20px] opacity-0">
              {image.description}
            </div>
            <button class="py-[10px] px-[20px] border-none cursor-pointer opacity-0">
              See More
            </button>
          </div>
        </div>
      ))
    }
  </div>

  <div class="button absolute w-full text-center bottom-[20px]">
    <button
      class="prev w-[40px] h-[35px] rounded-[8px] border border-black cursor-pointer m-[0_5px] transition-colors duration-300 hover:bg-[#ababab] hover:text-white"
    >
      <i class="fa-solid fa-arrow-left"></i>
    </button>
    <button
      class="next w-[40px] h-[35px] rounded-[8px] border border-black cursor-pointer m-[0_5px] transition-colors duration-300 hover:bg-[#ababab] hover:text-white"
    >
      <i class="fa-solid fa-arrow-right"></i>
    </button>
  </div>
</div>

<script>
  // Posicionamiento inicial de los elementos
  function setupInitialPositions() {
    const items = document.querySelectorAll(".item");

    if (items.length >= 1) {
      // Primer elemento (principal)
      const item1 = items[0] as HTMLElement;
      item1.style.top = "0";
      item1.style.left = "0";
      item1.style.transform = "translate(0, 0)";
      item1.style.width = "100%";
      item1.style.height = "100%";
      item1.style.borderRadius = "15px";

      // Mostrar contenido del primer elemento
      const content = item1.querySelector(".content") as HTMLElement;
      if (content) {
        content.style.display = "block";
      }
    }

    if (items.length >= 2) {
      // Segundo elemento (oculto)
      const item2 = items[1] as HTMLElement;
      item2.style.top = "0";
      item2.style.left = "0";
      item2.style.transform = "translate(0, 0)";
      item2.style.borderRadius = "0";
    }

    if (items.length >= 3) {
      // Tercer elemento (a la derecha)
      const item3 = items[2] as HTMLElement;
      item3.style.left = "50%";
    }

    if (items.length >= 4) {
      // Cuarto elemento (más a la derecha)
      const item4 = items[3] as HTMLElement;
      item4.style.left = "calc(50% + 220px)";
    }

    if (items.length >= 5) {
      // Quinto elemento (más a la derecha, opacidad 0)
      const item5 = items[4] as HTMLElement;
      item5.style.opacity = "0";
      item5.style.left = "calc(50% + 440px)";
    }

    // Elementos adicionales
    items.forEach((item, index) => {
      if (index >= 5) {
        const itemEl = item as HTMLElement;
        itemEl.style.left = "calc(50% + 440px)";
        itemEl.style.overflow = "hidden";
      }
    });
  }

  // Función para manejar la animación de los elementos
  function animateContent() {
    const activeItem = document.querySelector(".item:first-child");
    if (!activeItem) return;

    const content = activeItem.querySelector(".content");
    if (!content) return;

    const name = content.querySelector(".name");
    const description = content.querySelector(".description");
    const button = content.querySelector("button");

    // Resetear estilos
    if (name) (name as HTMLElement).style.opacity = "0";
    if (description) (description as HTMLElement).style.opacity = "0";
    if (button) (button as HTMLElement).style.opacity = "0";

    // Mostrar contenido con animación
    setTimeout(() => {
      if (content) (content as HTMLElement).style.display = "block";

      setTimeout(() => {
        if (name) {
          (name as HTMLElement).style.opacity = "1";
          (name as HTMLElement).style.transform = "translate(0)";
          (name as HTMLElement).style.filter = "blur(0)";
        }

        setTimeout(() => {
          if (description) {
            (description as HTMLElement).style.opacity = "1";
          }

          setTimeout(() => {
            if (button) {
              (button as HTMLElement).style.opacity = "1";
            }
          }, 300);
        }, 300);
      }, 300);
    }, 100);
  }

  // Inicialización cuando el DOM está listo
  document.addEventListener("DOMContentLoaded", () => {
    setupInitialPositions();
    animateContent();

    const next = document.querySelector(".next");
    const prev = document.querySelector(".prev");

    if (next) {
      next.addEventListener("click", () => {
        const items = document.querySelectorAll(".item");
        const slide = document.querySelector(".slide");

        if (slide && items.length > 0) {
          slide.appendChild(items[0]);
          setupInitialPositions();
          animateContent();
        }
      });
    }

    if (prev) {
      prev.addEventListener("click", () => {
        const items = document.querySelectorAll(".item");
        const slide = document.querySelector(".slide");

        if (slide && items.length > 0) {
          slide.prepend(items[items.length - 1]);
          setupInitialPositions();
          animateContent();
        }
      });
    }
  });
</script>
